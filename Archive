//
// breakout.c
//
// Computer Science 50
// Problem Set 3
//

// standard libraries
#define _XOPEN_SOURCE
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

// Stanford Portable Library
#include <spl/gevents.h>
#include <spl/gobjects.h>
#include <spl/gwindow.h>

// height and width of game's window in pixels
#define HEIGHT 600
#define WIDTH 400

// number of rows of bricks
#define ROWS 5

// number of columns of bricks
#define COLS 10

// radius of ball in pixels
#define RADIUS 10

// lives
#define LIVES 3

// paddle height and width
#define PADW 70
#define PADH 10

// prototypes
void initBricks(GWindow window);
GOval initBall(GWindow window);
GRect initPaddle(GWindow window);
GLabel initScoreboard(GWindow window);
void updateScoreboard(GWindow window, GLabel label, int points);
GObject detectCollision(GWindow window, GOval ball);
GRoundRect initLaser(GWindow window, double x, double y);

int main(int argc, char* argv[])
{
    // check if more than 2 arguments exist or if 2nd argument is not "GOD"
    if (argc > 2)
    {
        printf("Invalid Command\n");
        return 0;
    }
    else if (argc == 2)
    {
        if (strcmp(argv[1], "GOD") != 0)
        {
            printf("Invalid Command\n");
            return 0;
        }
    }

    // seed pseudorandom number generator
    srand48(time(NULL));

    // instantiate window
    GWindow window = newGWindow(WIDTH, HEIGHT);

    // instantiate bricks
    initBricks(window);

    // instantiate ball, centered in middle of window
    GOval ball = initBall(window);

    // instantiate paddle, centered at bottom of window
    GRect paddle = initPaddle(window);

    // instantiate scoreboard, centered in middle of window, just above ball
    GLabel label = initScoreboard(window);

    // number of bricks initially
    int bricks = COLS * ROWS;

    // number of lives initially
    int lives = LIVES;

    // number of points initially
    int points = 0;

    // paddle width
    int padw = 70;

    // initial velocities for ball
    double dx = drand48(); // since drand returns [0.0, 1.0)
    if (dx < 0.5)
    {
        dx = 1.75*dx;
    }
    double dy = 0.5;

    waitForClick();
    // keep playing until game over
    while (lives > 0 && bricks > 0)
    {

        if (argc == 1)
        {
            // check for mouse event
            GEvent event = getNextEvent(MOUSE_EVENT);

            // if we heard one
            if (event != NULL)
            {
                // if the event was movement
                if (getEventType(event) == MOUSE_MOVED)
                {
                    // ensure paddle follows top cursor
                    double x = getX(event) - getWidth(paddle) / 2;

                    if(x < 0)
                    {
                        setLocation(paddle, 0, 525);
                    }
                    else if(x > 325)
                    {
                        setLocation(paddle, 325, 525);
                    }
                    else
                    {
                        setLocation(paddle, x, 525);
                    }
                }

                else if(getEventType(event) == MOUSE_CLICKED)
                {
                    double padx = getX(paddle) + getWidth(paddle) / 2;
                    double pady = getY(paddle);
                    GRect laser = initLaser(window, padx, pady);
                }
            }
        }

        // GOD mode
        else
        {
            double x = getX(ball) - getWidth(paddle) / 2;
            setLocation(paddle, x, 525);
        }
        // move ball
        move(ball, dx, dy);
        GObject object = detectCollision(window, ball);

        // move laser
        move(laser, 0, -2.0);
        GObject laser_obj = detectCollision(window, laser);

        // bounce off right edge of window
        if (getX(ball) + getWidth(ball) >= getWidth(window))
        {
            dx = -dx;
        }

        // bounce off left edge of window
        else if (getX(ball) <= 0)
        {
            dx = -dx;
        }

        // bounce off top edge of window
        else if (getY(ball) <= 0)
        {
            dy = -dy;
        }

        // zooms past paddle
        else if (getY(ball) + getWidth(ball) >= getHeight(window))
        {
            lives--;
            waitForClick();
            setLocation(ball, WIDTH/2 - RADIUS, HEIGHT/2 - RADIUS);
        }

        // bounce off any GRect
        if (object != NULL)
        {
            if (strcmp(getType(object), "GRect") == 0)
            {
                dy = -dy;
            }

            // bounce off brick
            if (object != paddle && object != label)
            {
                removeGWindow(window, object);
                bricks--;

                // variable scoring mechanism
                int y = getY(object);
                switch(y)
                {
                    case 50:
                        points += 5;
                        break;
                    case 70:
                        points += 4;
                        break;
                    case 90:
                        points += 3;
                        break;
                    case 110:
                        points += 2;
                        break;
                    case 130:
                        points += 1;
                        break;
                    default:
                        points += 1;

                }

                // update label/scoreboard
                updateScoreboard(window, label, points);

               // decrease paddle width
               setSize(paddle, padw--, PADH);

               // variable speed (Y - direction)
               dy = dy + 0.01;
            }
        }

        // laser mechanism
        if (laser_obj != NULL)
        {
            if (strcmp(getType(laser_obj), "GOval") == 0)
            {
                dy = -dy;
            }

            // bounce off brick
            else if (laser_obj != paddle && laser_obj != label)
            {
                removeGWindow(window, laser_obj);
                bricks--;

                // variable scoring mechanism
                int y = getY(object);
                switch(y)
                {
                    case 50:
                        points += 5;
                        break;
                    case 70:
                        points += 4;
                        break;
                    case 90:
                        points += 3;
                        break;
                    case 110:
                        points += 2;
                        break;
                    case 130:
                        points += 1;
                        break;
                    default:
                        points += 1;

                }

                // update label/scoreboard
                updateScoreboard(window, label, points);

            }
        }


    }

    // wait for click before exiting
    waitForClick();

    // game over
    closeGWindow(window);
    return 0;
}

/**
 * Initializes window with a grid of bricks.
 */
void initBricks(GWindow window)
{
    for(int i = 50; i <= 130; i += 20)
    {
        for(int j = 2; j <= 362; j += 40)
        {
            GRect brick = newGRect(j,i,36,15);
            setFilled(brick, true);
            switch(i)
            {
                case 50:
                    setColor(brick, "magenta");
                    break;
                case 70:
                    setColor(brick, "blue");
                    break;
                case 90:
                    setColor(brick, "green");
                    break;
                case 110:
                    setColor(brick, "yellow");
                    break;
                case 130:
                    setColor(brick, "red");
                    break;
                default:
                setColor(brick, "black");

            }
            add(window, brick);
        }
    }
}

/**
 * Instantiates ball in center of window.  Returns ball.
 */
GOval initBall(GWindow window)
{
    GOval ball = newGOval(WIDTH/2 - RADIUS, HEIGHT/2 - RADIUS, RADIUS*2, RADIUS*2);
    setFilled(ball, true);
    setColor(ball, "black");
    add(window, ball);
    return ball;
}

/**
 * Instantiates paddle in bottom-middle of window.
 */
GRect initPaddle(GWindow window)
{
    GRect paddle = newGRect((WIDTH - PADW)/2, 525, PADW, PADH);
    setFilled(paddle, true);
    setColor(paddle, "black");
    add(window, paddle);
    return paddle;
}

/**
 * Instantiates, configures, and returns label for scoreboard.
 */
GLabel initScoreboard(GWindow window)
{
    GLabel label = newGLabel("0");
    setFont(label, "SansSerif-36");
    setColor(label, "blue");
    double x = (getWidth(window) - getWidth(label)) / 2;
    double y = (getHeight(window) - getHeight(label)) / 2;
    setLocation(label, x, y);
    add(window, label);
    return label;
}

/**
 * Updates scoreboard's label, keeping it centered in window.
 */
void updateScoreboard(GWindow window, GLabel label, int points)
{
    // update label
    char s[12];
    sprintf(s, "%i", points);
    setLabel(label, s);

    // center label in window
    double x = (getWidth(window) - getWidth(label)) / 2;
    double y = (getHeight(window) - getHeight(label)) / 2;
    setLocation(label, x, y);
}

/**
 * Detects whether ball has collided with some object in window
 * by checking the four corners of its bounding box (which are
 * outside the ball's GOval, and so the ball can't collide with
 * itself).  Returns object if so, else NULL.
 */
GObject detectCollision(GWindow window, GOval ball)
{
    // ball's location
    double x = getX(ball);
    double y = getY(ball);

    // for checking for collisions
    GObject object;

    // check for collision at ball's top-left corner
    object = getGObjectAt(window, x, y);
    if (object != NULL)
    {
        return object;
    }

    // check for collision at ball's top-right corner
    object = getGObjectAt(window, x + 2 * RADIUS, y);
    if (object != NULL)
    {
        return object;
    }

    // check for collision at ball's bottom-left corner
    object = getGObjectAt(window, x, y + 2 * RADIUS);
    if (object != NULL)
    {
        return object;
    }

    // check for collision at ball's bottom-right corner
    object = getGObjectAt(window, x + 2 * RADIUS, y + 2 * RADIUS);
    if (object != NULL)
    {
        return object;
    }

    // no collision
    return NULL;
}

GRoundRect initLaser(GWindow window, double x, double y)
{
    GRoundRect laser = newGRoundRect(x, y - 50, 5, 50, 0.1);
    setFilled(laser, true);
    setColor(laser, "red");
    add(window, laser);
    return laser;
}
